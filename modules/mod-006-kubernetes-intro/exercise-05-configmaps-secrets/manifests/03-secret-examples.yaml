---
# Example 1: Opaque Secret (generic secrets)
# Most common type for storing passwords, API keys, etc.
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: config-demo
  labels:
    app: demo-app
type: Opaque
data:
  # All values must be base64 encoded
  # To encode: echo -n 'value' | base64
  # To decode: echo 'encoded' | base64 -d

  # Database credentials
  database-username: YXBwdXNlcg==          # appuser
  database-password: c3VwZXJzZWNyZXQ=      # supersecret

  # API keys
  api-key: YXBpLWtleS0xMjM0NTY3ODkw        # api-key-1234567890
  api-secret: YXBpLXNlY3JldC1hYmNkZWY=    # api-secret-abcdef

  # JWT secret
  jwt-secret: and0LXNlY3JldC1rZXktZm9yLXNpZ25pbmctdG9rZW5z  # jwt-secret-key-for-signing-tokens

  # Encryption key
  encryption-key: ZW5jcnlwdGlvbi1rZXktMzItYnl0ZXMtbG9uZw==  # encryption-key-32-bytes-long

---
# Example 2: Docker Registry Secret
# For pulling images from private registries
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: config-demo
  labels:
    app: demo-app
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJodHRwczovL2luZGV4LmRvY2tlci5pby92MS8iOnsidXNlcm5hbWUiOiJteXVzZXIiLCJwYXNzd29yZCI6Im15cGFzc3dvcmQiLCJlbWFpbCI6Im15ZW1haWxAZXhhbXBsZS5jb20iLCJhdXRoIjoiYlhsMWMyVnlPbTE1Y0dGemMzZHZjbVE9In19fQ==

# To create this type of secret imperatively:
# kubectl create secret docker-registry docker-registry-secret \
#   --docker-server=https://index.docker.io/v1/ \
#   --docker-username=myuser \
#   --docker-password=mypassword \
#   --docker-email=myemail@example.com \
#   -n config-demo

---
# Example 3: TLS Secret
# For storing TLS certificates and keys
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: config-demo
  labels:
    app: demo-app
type: kubernetes.io/tls
data:
  # TLS certificate (base64 encoded)
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lVRk5xb0ZxOGFhRkxVcjBKaEE4VkZxSzBZd0F3RFFZSktvWklodmNOQVFFTApCUUF3R1RFWE1CVUdBMVVFQXd3T2RHVnpkQzVsZUdGdGNHeGxMbU52YlRBZUZ3MHlNekV3TWpReE1UTXdNREJhCkZ3MHlOREV3TWpNeE1UTXdNREJhTUJreEZ6QVZCZ05WQkFNTURuUmxjM1F1WlhoaGJYQnNaUzVqYjIwd2dnRWkKTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFETS9WS3JxT2U4QldPdnJXNjNlRGo4Qy9hSwpXTjdqV3pqVlBvZGFrY0VYampjc0Q2ejdEd1RncVg4RnpkeEI1UUhCYVpKL3JneVloOTRqcGNxd29YdGJYRDdyCmdvU29RQXhpT0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==

  # TLS private key (base64 encoded)
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE0vVktycU9lOEJXT3YKclc2M2VEajhDL2FLV043ald6alZQb2Rha2NFWGpqY3NENno3RHdUZ3FYOEZ6ZHhCNVFIQmFaSi9yZ3lZaDk0ago==

# To create TLS secret imperatively:
# kubectl create secret tls tls-secret \
#   --cert=path/to/tls.crt \
#   --key=path/to/tls.key \
#   -n config-demo

---
# Example 4: SSH Auth Secret
# For storing SSH private keys
apiVersion: v1
kind: Secret
metadata:
  name: ssh-auth-secret
  namespace: config-demo
  labels:
    app: demo-app
type: kubernetes.io/ssh-auth
data:
  # SSH private key (base64 encoded)
  ssh-privatekey: LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFNd0FBQUF0emMyZ3RaVwpReU5UVXhPUUFBQUNETnNjNGNUZ1VuT3Q3K2RVOElJbDc5Y3lmUGZMdE1rYjlYaStCbGlGVFZBPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==

---
# Example 5: Basic Auth Secret
# For HTTP basic authentication
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth-secret
  namespace: config-demo
  labels:
    app: demo-app
type: kubernetes.io/basic-auth
data:
  username: YWRtaW4=        # admin
  password: cGFzc3dvcmQxMjM=  # password123

---
# Example 6: Service Account Token Secret
# Automatically created for service accounts
apiVersion: v1
kind: Secret
metadata:
  name: service-account-token
  namespace: config-demo
  labels:
    app: demo-app
  annotations:
    kubernetes.io/service-account.name: demo-app-sa
type: kubernetes.io/service-account-token

---
# Example 7: Secret with stringData (auto-encoded)
# Use stringData for convenience - Kubernetes will base64 encode it
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-string
  namespace: config-demo
  labels:
    app: demo-app
type: Opaque
stringData:
  # No need to base64 encode - Kubernetes does it automatically
  db-password: "my-super-secret-password"
  api-key: "sk-1234567890abcdef"
  smtp-password: "smtp-password-123"

  # You can also include multiline data
  private-key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEA...
    -----END RSA PRIVATE KEY-----

---
# Example 8: Immutable Secret
# Cannot be modified after creation (Kubernetes 1.21+)
apiVersion: v1
kind: Secret
metadata:
  name: immutable-secret
  namespace: config-demo
  labels:
    app: demo-app
type: Opaque
immutable: true
data:
  api-key: YXBpLWtleS1pbW11dGFibGU=

---
# Example 9: Secret for external service credentials
apiVersion: v1
kind: Secret
metadata:
  name: external-services
  namespace: config-demo
  labels:
    app: demo-app
    type: external-credentials
type: Opaque
stringData:
  # AWS credentials
  aws-access-key-id: "AKIAIOSFODNN7EXAMPLE"
  aws-secret-access-key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
  aws-region: "us-west-2"

  # SendGrid API key
  sendgrid-api-key: "SG.1234567890abcdef"

  # Stripe API keys
  stripe-publishable-key: "pk_test_1234567890"
  stripe-secret-key: "sk_test_0987654321"

  # Twilio credentials
  twilio-account-sid: "AC1234567890abcdef"
  twilio-auth-token: "1234567890abcdef"

---
# Example 10: Multiple secrets for different environments
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-dev
  namespace: config-demo
  labels:
    app: demo-app
    environment: development
type: Opaque
stringData:
  database-password: "dev-password"
  api-key: "dev-api-key"
  jwt-secret: "dev-jwt-secret"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-prod
  namespace: config-demo
  labels:
    app: demo-app
    environment: production
type: Opaque
stringData:
  database-password: "prod-super-secure-password-change-me"
  api-key: "prod-api-key-change-me"
  jwt-secret: "prod-jwt-secret-change-me-use-vault"

---
# IMPORTANT NOTES:
#
# 1. Secrets are base64 encoded, NOT encrypted by default
# 2. Anyone with access to view Secrets can decode them
# 3. Enable encryption at rest in your cluster
# 4. Use external secret management for production:
#    - HashiCorp Vault
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - Google Secret Manager
#    - Sealed Secrets (Bitnami)
#    - External Secrets Operator
#
# 5. Never commit secrets to version control
# 6. Use RBAC to restrict secret access
# 7. Audit secret access
# 8. Rotate secrets regularly
#
# Commands to create Secrets imperatively:
#
# From literal values:
# kubectl create secret generic app-secrets \
#   --from-literal=username=admin \
#   --from-literal=password=secret \
#   -n config-demo
#
# From files:
# kubectl create secret generic app-secrets \
#   --from-file=username.txt \
#   --from-file=password.txt \
#   -n config-demo
#
# TLS secret:
# kubectl create secret tls tls-secret \
#   --cert=tls.crt \
#   --key=tls.key \
#   -n config-demo
#
# Docker registry:
# kubectl create secret docker-registry regcred \
#   --docker-server=<server> \
#   --docker-username=<username> \
#   --docker-password=<password> \
#   -n config-demo
