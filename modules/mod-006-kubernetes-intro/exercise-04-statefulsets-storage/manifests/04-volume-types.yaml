---
# Example 1: emptyDir Volume
# Temporary storage that exists for pod lifetime
# Data is lost when pod is deleted
apiVersion: v1
kind: Pod
metadata:
  name: emptydir-example
  namespace: statefulset-demo
  labels:
    example: emptydir
spec:
  containers:
  - name: writer
    image: busybox:latest
    command:
    - sh
    - -c
    - |
      while true; do
        date >> /data/timestamp.txt
        echo "Writing to emptyDir..."
        sleep 5
      done
    volumeMounts:
    - name: cache-volume
      mountPath: /data

  - name: reader
    image: busybox:latest
    command:
    - sh
    - -c
    - |
      while true; do
        echo "Reading from emptyDir:"
        tail -5 /data/timestamp.txt || echo "File not ready"
        sleep 10
      done
    volumeMounts:
    - name: cache-volume
      mountPath: /data

  volumes:
  - name: cache-volume
    emptyDir:
      sizeLimit: 100Mi  # Optional size limit

---
# Example 2: hostPath Volume
# Mounts a file/directory from the host node
# WARNING: Only use for development/testing, not production!
apiVersion: v1
kind: Pod
metadata:
  name: hostpath-example
  namespace: statefulset-demo
  labels:
    example: hostpath
spec:
  containers:
  - name: app
    image: nginx:alpine
    volumeMounts:
    - name: host-data
      mountPath: /usr/share/nginx/html
      readOnly: true

  volumes:
  - name: host-data
    hostPath:
      path: /tmp/nginx-data
      type: DirectoryOrCreate  # Creates directory if it doesn't exist

---
# Example 3: PersistentVolume (manually provisioned)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: manual-pv-001
  labels:
    type: local
    example: manual-pv
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/pv-001
    type: DirectoryOrCreate

---
# PersistentVolumeClaim for the manual PV
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: manual-pvc-001
  namespace: statefulset-demo
  labels:
    example: manual-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Pod using the PVC
apiVersion: v1
kind: Pod
metadata:
  name: pvc-example
  namespace: statefulset-demo
  labels:
    example: pvc
spec:
  containers:
  - name: app
    image: nginx:alpine
    ports:
    - containerPort: 80
    volumeMounts:
    - name: persistent-storage
      mountPath: /usr/share/nginx/html

  volumes:
  - name: persistent-storage
    persistentVolumeClaim:
      claimName: manual-pvc-001

---
# Example 4: ConfigMap as Volume
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-vol
  namespace: statefulset-demo
data:
  app.properties: |
    environment=production
    log.level=INFO
    database.host=postgres.statefulset-demo.svc.cluster.local
  nginx.conf: |
    server {
      listen 80;
      location / {
        return 200 "Configuration loaded from ConfigMap\n";
      }
    }

---
apiVersion: v1
kind: Pod
metadata:
  name: configmap-volume-example
  namespace: statefulset-demo
  labels:
    example: configmap-volume
spec:
  containers:
  - name: app
    image: busybox:latest
    command:
    - sh
    - -c
    - |
      echo "Configuration files:"
      ls -la /config/
      echo "---"
      cat /config/app.properties
      echo "---"
      cat /config/nginx.conf
      sleep 3600
    volumeMounts:
    - name: config-volume
      mountPath: /config

  volumes:
  - name: config-volume
    configMap:
      name: app-config-vol

---
# Example 5: Secret as Volume
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-vol
  namespace: statefulset-demo
type: Opaque
data:
  # Base64 encoded values
  database-password: c3VwZXJzZWNyZXRwYXNzd29yZA==  # supersecretpassword
  api-key: YXBpLWtleS0xMjM0NTY3ODkw  # api-key-1234567890

---
apiVersion: v1
kind: Pod
metadata:
  name: secret-volume-example
  namespace: statefulset-demo
  labels:
    example: secret-volume
spec:
  containers:
  - name: app
    image: busybox:latest
    command:
    - sh
    - -c
    - |
      echo "Secret files (automatically decoded):"
      ls -la /secrets/
      echo "Database password: $(cat /secrets/database-password)"
      echo "API Key: $(cat /secrets/api-key)"
      sleep 3600
    volumeMounts:
    - name: secret-volume
      mountPath: /secrets
      readOnly: true  # Mount secrets as read-only

  volumes:
  - name: secret-volume
    secret:
      secretName: app-secrets-vol
      defaultMode: 0400  # Read-only for owner

---
# Example 6: Projected Volume
# Combines multiple volume sources into a single directory
apiVersion: v1
kind: Pod
metadata:
  name: projected-volume-example
  namespace: statefulset-demo
  labels:
    example: projected-volume
spec:
  containers:
  - name: app
    image: busybox:latest
    command:
    - sh
    - -c
    - |
      echo "Projected volume contents:"
      ls -la /projected/
      echo "---"
      echo "Config:"
      cat /projected/app.properties
      echo "---"
      echo "Secret:"
      cat /projected/api-key
      sleep 3600
    volumeMounts:
    - name: projected-volume
      mountPath: /projected

  volumes:
  - name: projected-volume
    projected:
      sources:
      - configMap:
          name: app-config-vol
          items:
          - key: app.properties
            path: app.properties
      - secret:
          name: app-secrets-vol
          items:
          - key: api-key
            path: api-key

---
# Example 7: Ephemeral Volume (Generic Ephemeral Volume)
# Available in Kubernetes 1.23+
# Creates temporary PVC that follows pod lifecycle
apiVersion: v1
kind: Pod
metadata:
  name: ephemeral-volume-example
  namespace: statefulset-demo
  labels:
    example: ephemeral-volume
spec:
  containers:
  - name: app
    image: nginx:alpine
    volumeMounts:
    - name: ephemeral-storage
      mountPath: /usr/share/nginx/html

  volumes:
  - name: ephemeral-storage
    ephemeral:
      volumeClaimTemplate:
        metadata:
          labels:
            type: ephemeral
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: standard
          resources:
            requests:
              storage: 100Mi
