version: '3.8'

services:
  # Jupyter Lab for ML Development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: jupyter-lab
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - POSTGRES_URL=postgresql://mluser:mlpass@postgres:5432/mlflowdb
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./models:/home/jovyan/models
      - jupyter-home:/home/jovyan
    command: start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''
    networks:
      - mlflow-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mlflow:
        condition: service_started

  # MLflow Tracking Server
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://mluser:mlpass@postgres:5432/mlflowdb
      - ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
    command: >
      mlflow server
      --backend-store-uri postgresql://mluser:mlpass@postgres:5432/mlflowdb
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    networks:
      - mlflow-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL for MLflow Backend
  postgres:
    image: postgres:16-alpine
    container_name: mlflow-postgres
    environment:
      - POSTGRES_DB=mlflowdb
      - POSTGRES_USER=mluser
      - POSTGRES_PASSWORD=mlpass
    volumes:
      - postgres-mlflow-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mluser -d mlflowdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlflow-network
    restart: unless-stopped

  # MinIO for Artifact Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: minio-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - mlflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Create MinIO Buckets
  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/mlflow || true;
      /usr/bin/mc policy set download myminio/mlflow;
      exit 0;
      "
    networks:
      - mlflow-network

  # Model Registry UI
  model-registry:
    build:
      context: .
      dockerfile: Dockerfile.registry
    container_name: model-registry
    ports:
      - "8080:8080"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - BACKEND_STORE_URI=postgresql://mluser:mlpass@postgres:5432/mlflowdb
    networks:
      - mlflow-network
    restart: unless-stopped
    depends_on:
      - mlflow

networks:
  mlflow-network:
    driver: bridge

volumes:
  postgres-mlflow-data:
    driver: local
  mlflow-artifacts:
    driver: local
  minio-data:
    driver: local
  jupyter-home:
    driver: local
