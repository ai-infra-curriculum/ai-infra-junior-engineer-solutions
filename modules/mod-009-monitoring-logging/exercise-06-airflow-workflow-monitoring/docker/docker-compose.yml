version: '3.8'

# ====================================================================================================
# Common Airflow Configuration
# ====================================================================================================
x-airflow-common: &airflow-common
  image: apache/airflow:2.7.3
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'

    # Enable metrics export to StatsD
    AIRFLOW__METRICS__STATSD_ON: 'true'
    AIRFLOW__METRICS__STATSD_HOST: statsd-exporter
    AIRFLOW__METRICS__STATSD_PORT: 9125
    AIRFLOW__METRICS__STATSD_PREFIX: airflow

    # Scheduler configuration
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30

    # Logging
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO

  volumes:
    - ../dags:/opt/airflow/dags
    - ../src:/opt/airflow/src
    - ../logs:/opt/airflow/logs
    - ../plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    postgres:
      condition: service_healthy

# ====================================================================================================
# Services
# ====================================================================================================
services:
  # PostgreSQL - Airflow metadata database
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow-network

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # Airflow Initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Create directories with proper permissions
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/src
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins,src}

        # Initialize database
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ..:/sources
    networks:
      - airflow-network

  # StatsD Exporter - Converts StatsD metrics to Prometheus format
  statsd-exporter:
    image: prom/statsd-exporter:v0.26.0
    ports:
      - "9102:9102"  # Prometheus metrics endpoint
      - "9125:9125/udp"  # StatsD listener
    command:
      - '--statsd.mapping-config=/tmp/statsd_mapping.yml'
      - '--statsd.listen-udp=:9125'
      - '--web.listen-address=:9102'
    volumes:
      - ../config/statsd_mapping.yml:/tmp/statsd_mapping.yml:ro
    restart: always
    networks:
      - airflow-network

  # Prometheus - Metrics storage and querying
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    networks:
      - airflow-network

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
    restart: always
    networks:
      - airflow-network

# ====================================================================================================
# Volumes
# ====================================================================================================
volumes:
  postgres-db-volume:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ====================================================================================================
# Networks
# ====================================================================================================
networks:
  airflow-network:
    driver: bridge
