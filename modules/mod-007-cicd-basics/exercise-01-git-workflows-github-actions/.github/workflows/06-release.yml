name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, v2.1.3, etc.)

permissions:
  contents: write
  packages: write

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$TAG" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

      - name: Validate semantic version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}

          # Check semantic versioning format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.0.0, 2.1.3-beta.1)"
            exit 1
          fi

          echo "✅ Valid semantic version: $VERSION"

  build-artifacts:
    name: Build Release Artifacts
    needs: validate-tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel

      - name: Build Python package
        run: |
          # Create a simple setup.py if it doesn't exist
          if [ ! -f setup.py ]; then
            cat > setup.py << 'EOF'
          from setuptools import setup, find_packages

          setup(
              name="ml-infrastructure-examples",
              version="${{ needs.validate-tag.outputs.version }}",
              packages=find_packages(),
              install_requires=[],
          )
          EOF
          fi

          python -m build

      - name: Create source archive
        run: |
          tar -czf ml-infra-examples-${{ needs.validate-tag.outputs.version }}.tar.gz \
            examples/ \
            scripts/ \
            README.md

      - name: Create checksums
        run: |
          sha256sum dist/* > checksums.txt
          sha256sum ml-infra-examples-*.tar.gz >> checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
            ml-infra-examples-*.tar.gz
            checksums.txt

  build-docker:
    name: Build Docker Images
    needs: validate-tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  run-tests:
    name: Run Full Test Suite
    needs: validate-tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pytest pytest-cov
          pip install -r examples/requirements.txt

      - name: Run tests
        run: |
          pytest examples/ \
            --verbose \
            --cov=examples \
            --cov-report=xml \
            --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: release

  generate-changelog:
    name: Generate Changelog
    needs: validate-tag
    runs-on: ubuntu-latest

    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release - no previous tag"
            CHANGELOG="Initial release"
          else
            echo "Generating changelog from $PREVIOUS_TAG to ${GITHUB_REF#refs/tags/}"

            # Generate changelog from commits
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD \
              --pretty=format:"- %s (%h)" \
              --no-merges)
          fi

          # Save changelog
          echo "$CHANGELOG" > CHANGELOG.md

          # Format for GitHub output (escape newlines)
          CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | awk '{printf "%s\\n", $0}')
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: CHANGELOG.md

  create-release:
    name: Create GitHub Release
    needs:
      - validate-tag
      - build-artifacts
      - build-docker
      - run-tests
      - generate-changelog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog
          path: ./

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # Release ${{ needs.validate-tag.outputs.version }}

          ## What's Changed

          $(cat CHANGELOG.md)

          ## Installation

          ### Python Package
          ```bash
          pip install ml-infrastructure-examples==${{ needs.validate-tag.outputs.version }}
          ```

          ### Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.validate-tag.outputs.version }}
          ```

          ### Source Archive
          Download `ml-infra-examples-${{ needs.validate-tag.outputs.version }}.tar.gz` from the assets below.

          ## Checksums
          ```
          $(cat artifacts/checksums.txt)
          ```

          ## Full Changelog
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.validate-tag.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
          files: |
            artifacts/dist/*
            artifacts/ml-infra-examples-*.tar.gz
            artifacts/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-package:
    name: Publish to PyPI
    needs:
      - validate-tag
      - create-release
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.is-prerelease == 'false'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: artifacts/dist/

  notify-release:
    name: Notify Release
    needs:
      - validate-tag
      - create-release
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Create release summary
        run: |
          cat > $GITHUB_STEP_SUMMARY << 'EOF'
          # 🎉 Release ${{ needs.validate-tag.outputs.version }}

          ## Status
          - ✅ Release created successfully
          - ✅ Docker images published
          - ✅ Artifacts uploaded
          ${{ needs.validate-tag.outputs.is-prerelease == 'true' && '- ⚠️ This is a pre-release' || '- ✅ PyPI package published' }}

          ## Links
          - [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
          - [Docker Image](https://github.com/${{ github.repository }}/pkgs/container/${{ github.event.repository.name }})

          ## Next Steps
          1. Announce the release to users
          2. Update documentation if needed
          3. Monitor for any issues
          EOF

      - name: Send Slack notification (if configured)
        if: vars.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "🎉 New release: ${{ needs.validate-tag.outputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*New Release: ${{ needs.validate-tag.outputs.version }}*\n\n<https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}|View Release>"
                  }
                }
              ]
            }'
