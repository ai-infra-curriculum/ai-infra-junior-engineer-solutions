name: Python Tests

# Run on all pushes and pull requests
on: [push, pull_request]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/Library/Caches/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-timeout
          pip install -r examples/requirements.txt

      - name: Display test environment
        run: |
          python --version
          pip --version
          pip list

      - name: Run tests with pytest
        timeout-minutes: 10
        run: |
          pytest examples/ \
            --verbose \
            --color=yes \
            --tb=short \
            --maxfail=5

      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: |
          pytest examples/ \
            --cov=examples \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-branch

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: htmlcov/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            .pytest_cache/
            test-results.xml

  test-parallel:
    name: Parallel Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-xdist
          pip install -r examples/requirements.txt

      - name: Run tests in parallel
        run: |
          pytest examples/ \
            -n auto \
            --verbose \
            --durations=10

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest psycopg2-binary redis
          pip install -r examples/requirements.txt

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432; do sleep 1; done
          echo "PostgreSQL is ready!"

          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping; do sleep 1; done
          echo "Redis is ready!"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
        run: |
          pytest examples/ \
            -m integration \
            --verbose || echo "No integration tests found"

  test-docker:
    name: Test in Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ml-test:latest -f- . <<EOF
          FROM python:3.11-slim
          WORKDIR /app
          COPY examples/ ./examples/
          RUN pip install pytest numpy scikit-learn
          CMD ["pytest", "examples/", "-v"]
          EOF

      - name: Run tests in Docker
        run: docker run --rm ml-test:latest

  test-security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security checks
        run: |
          echo "Running Bandit security analysis..."
          bandit -r examples/ -f json -o bandit-report.json || true
          bandit -r examples/ -f screen

      - name: Check dependencies for vulnerabilities
        run: |
          echo "Checking for known security vulnerabilities..."
          safety check --json || true
          safety check

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark
          pip install -r examples/requirements.txt

      - name: Run performance tests
        run: |
          pytest examples/ \
            -m benchmark \
            --benchmark-only \
            --benchmark-json=benchmark.json || echo "No benchmark tests found"

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark.json

  test-summary:
    name: Test Summary
    needs: [test, test-parallel, test-integration, test-docker, test-security, test-performance]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check results
        run: |
          echo "========================================="
          echo "Test Results Summary"
          echo "========================================="
          echo "Matrix Tests: ${{ needs.test.result }}"
          echo "Parallel Tests: ${{ needs.test-parallel.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Docker Tests: ${{ needs.test-docker.result }}"
          echo "Security Tests: ${{ needs.test-security.result }}"
          echo "Performance Tests: ${{ needs.test-performance.result }}"
          echo "========================================="

      - name: Fail if critical tests failed
        if: |
          needs.test.result == 'failure' ||
          needs.test-parallel.result == 'failure'
        run: |
          echo "Critical tests failed!"
          exit 1
