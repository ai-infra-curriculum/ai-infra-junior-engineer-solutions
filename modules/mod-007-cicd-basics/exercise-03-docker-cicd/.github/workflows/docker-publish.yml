name: Docker Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish'
        required: true
        default: 'latest'

env:
  IMAGE_NAME: ml-api
  REGISTRY: ghcr.io

jobs:
  publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.optimized
            suffix: ""
            platforms: linux/amd64,linux/arm64
          - dockerfile: Dockerfile.gpu
            suffix: "-gpu"
            platforms: linux/amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION=${{ github.event.inputs.tag }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }},suffix=${{ matrix.suffix }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},suffix=${{ matrix.suffix }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},suffix=${{ matrix.suffix }}
            type=raw,value=latest,suffix=${{ matrix.suffix }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}${{ matrix.suffix }}
          format: spdx-json
          output-file: sbom-${{ matrix.dockerfile }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ matrix.dockerfile }}
          path: sbom-${{ matrix.dockerfile }}.spdx.json

  publish-summary:
    name: Publish Summary
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Create summary
        run: |
          echo "## Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ github.repository }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` - Latest stable CPU image" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest-gpu\` - Latest stable GPU image" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.event.release.tag_name }}\` - This release (CPU)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.event.release.tag_name }}-gpu\` - This release (GPU)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# CPU image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# GPU image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest-gpu" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
