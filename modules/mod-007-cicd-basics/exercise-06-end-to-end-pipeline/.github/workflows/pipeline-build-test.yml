name: Build and Test Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.10'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black isort mypy pylint

      - name: Run flake8
        run: |
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
        continue-on-error: false

      - name: Check code formatting with black
        run: |
          black --check src/ tests/ --line-length=100

      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/

      - name: Run pylint
        run: |
          pip install -r requirements.txt
          pylint src/ --disable=C0111,R0903,W0212 --max-line-length=100
        continue-on-error: true

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install bandit safety

      - name: Run bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Check dependencies with safety
        run: |
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint]

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junitxml=test-results.xml \
            -n auto \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ml-pipeline:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker container test
        run: |
          docker build -t ml-pipeline:test .
          docker run --rm ml-pipeline:test python -c "import src; print('Import successful')"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run end-to-end pipeline test
        run: |
          # Create test data
          python -c "
          import pandas as pd
          import numpy as np
          from sklearn.datasets import make_classification
          X, y = make_classification(n_samples=1000, n_features=20, random_state=42)
          df = pd.DataFrame(X, columns=[f'feature_{i}' for i in range(20)])
          df['target'] = y
          df.to_csv('test_data.csv', index=False)
          "

          # Run training pipeline
          python pipelines/training_pipeline.py \
            --data-path test_data.csv \
            --experiment-name ci-test
