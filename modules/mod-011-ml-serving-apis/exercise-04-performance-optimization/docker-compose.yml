version: '3.8'

services:
  # ==================
  # Message Broker
  # ==================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ml-network

  # ==================
  # Cache & Result Backend
  # ==================
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ml-network

  # ==================
  # ML API Instances
  # ==================
  api1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-api-1
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
      - WORKER_ID=1
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  api2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-api-2
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
      - WORKER_ID=2
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  api3:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ml-api-3
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
      - WORKER_ID=3
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ==================
  # Celery Workers
  # ==================
  celery-worker-predictions:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-predictions
    command: celery -A src.async_processing.celery_app worker --loglevel=info --queues=predictions --concurrency=4
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  celery-worker-batch:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-batch
    command: celery -A src.async_processing.celery_app worker --loglevel=info --queues=batch --concurrency=2
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  celery-worker-training:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-training
    command: celery -A src.async_processing.celery_app worker --loglevel=info --queues=training --concurrency=1
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./models:/app/models
    networks:
      - ml-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G

  # ==================
  # Celery Beat (Scheduler)
  # ==================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat
    command: celery -A src.async_processing.celery_app beat --loglevel=info
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - ml-network

  # ==================
  # Celery Flower (Monitoring)
  # ==================
  flower:
    image: mher/flower:latest
    container_name: flower
    command: celery --broker=amqp://guest:guest@rabbitmq:5672// flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - ml-network

  # ==================
  # Load Balancer
  # ==================
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    depends_on:
      - api1
      - api2
      - api3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./load_balancing/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - ml-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ==================
  # Monitoring - Prometheus
  # ==================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - ml-network

  # ==================
  # Monitoring - Grafana
  # ==================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - ml-network

  # ==================
  # cAdvisor (Container metrics)
  # ==================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - ml-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  nginx_cache:

networks:
  ml-network:
    driver: bridge
