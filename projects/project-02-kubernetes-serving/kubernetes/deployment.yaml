apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-api
  namespace: ml-serving
  labels:
    app: model-api
    version: v1.0
    component: inference
spec:
  replicas: 3
  selector:
    matchLabels:
      app: model-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: model-api
        version: v1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: model-api
        image: model-api:v1.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 5000
          protocol: TCP
        - name: metrics
          containerPort: 8000
          protocol: TCP
        env:
        - name: MODEL_NAME
          valueFrom:
            configMapKeyRef:
              name: model-api-config
              key: model_name
        - name: MODEL_DEVICE
          value: "cpu"
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: model-api-config
              key: log_level
        - name: WORKERS
          value: "4"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: cache
          mountPath: /tmp/cache
      volumes:
      - name: cache
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
